8? registers
program counter = register 0
base-of-stack-pointer = register 1
top-of-stack-pointer
stack

# program halts when PC < 0

---

CONST [value]
# push a constant value to the stack, incrementing TOS

PUSH [regno]
# push the value from a register to the top of the stack, incrementing TOS

POP [regno]
# pop the value from the top of the stack to a register, decrementing TOS

LOAD [regno-read-to] [regno-address]
# read the value from (BOS + address) and store in read-to register

STORE [regno-write-from] [regno-address]
# write the value from write-from register at address (BOS + address)

COPY [regno-to] [regno-from]
# copy the value from one register to another

INPUT
# pop coordinates x,y from the stack, decrementing TOS by 2, and read from input grid to store in register 2.

OUTPUT # from register 2
# pop coordinates x,y from the stack, decrementing TOS by 2, and write from register 2 to the output spreadsheet.

JUMPIF [pc-regno]
# condition value is popped from the stack, decrementing TOS. if the condition value is zero, set the program counter to the value in the pc register
# to jump unconditionally, simply set register 0 to change the program counter

ADD
MULT
AND
OR
XOR
LSHIFT
RSHIFT
EQUALS
LESSTHAN
# binary operations work on the stack, decrementing TOS
# bitwise ops work on 16-bit ints
# comparison ops equals/less-than store 1 or 0 for true/false

NOT
# perform a bitwise not on the top of the stack, as a 16-bit int
